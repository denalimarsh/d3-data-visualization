<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10100.17.0118.2108                               -->
<workbook source-build='10.1.4 (10100.17.0118.2108)' source-platform='win' version='10.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='FullRefugeeDataSet' inline='true' name='federated.0y68jnz1uxo9a21evjn5g1x0vycd' version='10.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='FullRefugeeDataSet' name='textscan.0jfvkm41xsrdip12rg6cd110e6s3'>
            <connection class='textscan' directory='C:/Users/denal/Desktop/datavis/datasets' filename='FullRefugeeDataSet.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.0jfvkm41xsrdip12rg6cd110e6s3' name='FullRefugeeDataSet.csv' table='[FullRefugeeDataSet#csv]' type='table'>
          <columns character-set='UTF-8' header='no' locale='en_US' separator=','>
            <column datatype='string' name='F1' ordinal='0' />
            <column datatype='string' name='F2' ordinal='1' />
            <column datatype='string' name='F3' ordinal='2' />
            <column datatype='integer' name='F4' ordinal='3' />
            <column datatype='integer' name='F5' ordinal='4' />
            <column datatype='integer' name='F6' ordinal='5' />
            <column datatype='integer' name='F7' ordinal='6' />
            <column datatype='integer' name='F8' ordinal='7' />
            <column datatype='integer' name='F9' ordinal='8' />
            <column datatype='integer' name='F10' ordinal='9' />
            <column datatype='integer' name='F11' ordinal='10' />
            <column datatype='integer' name='F12' ordinal='11' />
            <column datatype='integer' name='F13' ordinal='12' />
            <column datatype='integer' name='F14' ordinal='13' />
            <column datatype='integer' name='F15' ordinal='14' />
            <column datatype='integer' name='F16' ordinal='15' />
            <column datatype='string' name='F17' ordinal='16' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F2</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F2]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F2</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F3</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F3]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F3</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F4</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F4]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F4</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F5</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F5]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F5</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F6</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F6]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F6</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F7</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F7]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F7</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F8</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F8]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F8</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F9</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F9]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F9</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F10</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F10]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F10</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F11</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F11]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F11</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F12</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F12]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F12</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F13</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F13]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F13</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F14</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F14]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F14</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F15</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F15]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F15</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F16</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F16]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F16</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F17</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F17]</local-name>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias>F17</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[FullRefugeeDataSet.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;false&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='2006' datatype='integer' name='[F10]' role='measure' type='quantitative' />
      <column caption='2007' datatype='integer' name='[F11]' role='measure' type='quantitative' />
      <column caption='2008' datatype='integer' name='[F12]' role='measure' type='quantitative' />
      <column caption='2009' datatype='integer' name='[F13]' role='measure' type='quantitative' />
      <column caption='2010' datatype='integer' name='[F14]' role='measure' type='quantitative' />
      <column caption='2011' datatype='integer' name='[F15]' role='measure' type='quantitative' />
      <column caption='2012' datatype='integer' name='[F16]' role='measure' type='quantitative' />
      <column caption='2013' datatype='string' name='[F17]' role='dimension' type='nominal' />
      <column caption='Country of residence' datatype='string' name='[F1]' role='dimension' type='nominal' />
      <column caption='Origin' datatype='string' name='[F2]' role='dimension' type='nominal' />
      <column caption='Population type' datatype='string' name='[F3]' role='dimension' type='nominal' />
      <column caption='2000' datatype='integer' name='[F4]' role='measure' type='quantitative' />
      <column caption='2001' datatype='integer' name='[F5]' role='measure' type='quantitative' />
      <column caption='2002' datatype='integer' name='[F6]' role='measure' type='quantitative' />
      <column caption='2003' datatype='integer' name='[F7]' role='measure' type='quantitative' />
      <column caption='2004' datatype='integer' name='[F8]' role='measure' type='quantitative' />
      <column caption='2005' datatype='integer' name='[F9]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column-instance column='[F2]' derivation='None' name='[none:F2:nk]' pivot='key' type='nominal' />
      <column-instance column='[F3]' derivation='None' name='[none:F3:nk]' pivot='key' type='nominal' />
      <column-instance column='[F10]' derivation='Sum' name='[sum:F10:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F11]' derivation='Sum' name='[sum:F11:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F12]' derivation='Sum' name='[sum:F12:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F13]' derivation='Sum' name='[sum:F13:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F14]' derivation='Sum' name='[sum:F14:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F15]' derivation='Sum' name='[sum:F15:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F16]' derivation='Sum' name='[sum:F16:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F4]' derivation='Sum' name='[sum:F4:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F5]' derivation='Sum' name='[sum:F5:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F6]' derivation='Sum' name='[sum:F6:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F7]' derivation='Sum' name='[sum:F7:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F8]' derivation='Sum' name='[sum:F8:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F9]' derivation='Sum' name='[sum:F9:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.428058' measure-ordering='alphabetic' measure-percentage='0.571942' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:F3:nk]' palette='superfishel_stone_10_0' type='palette'>
            <map to='#55ad89'>
              <bucket>&quot;Population type&quot;</bucket>
            </map>
            <map to='#6388b4'>
              <bucket>%null%</bucket>
            </map>
            <map to='#8cc2ca'>
              <bucket>&quot;Others of concern&quot;</bucket>
            </map>
            <map to='#a9b5ae'>
              <bucket>&quot;Stateless&quot;</bucket>
            </map>
            <map to='#baa094'>
              <bucket>&quot;Returned refugees&quot;</bucket>
            </map>
            <map to='#bb7693'>
              <bucket>&quot;Returned IDPs&quot;</bucket>
            </map>
            <map to='#c3bc3f'>
              <bucket>&quot;Refugees&quot;</bucket>
            </map>
            <map to='#ef6f6a'>
              <bucket>&quot;Internally displaced&quot;</bucket>
            </map>
            <map to='#ffae34'>
              <bucket>&quot;Asylum seekers&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F12:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F4:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F8:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F13:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F9:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F5:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F10:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F14:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F11:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F6:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F15:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F7:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:F2:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Origin / Returned from&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Republic of Korea&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Syrian Arab Republic&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Plurinational State of Bolivia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Occupied Palestinian Territory&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Tibetan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Holy See&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Viet Nam&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Federated States of Micronesia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;United Republic of Tanzania&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Palestinian&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;The former Yugoslav Republic of Macedonia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Democratic People&apos;s Republic of Korea&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Federal Republic of Yugoslavia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Serbia (and Kosovo: S/RES/1244 (1999))&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Republic of Moldova&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Islamic Republic of Iran&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Libyan Arab Jamahiriya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Stateless&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Macao SAR, China&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Various&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Western Sahara&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>%null%</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bolivarian Republic of Venezuela&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Democratic Republic of the Congo&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Serbia and Montenegro&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lao People&apos;s Democratic Republic&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Côte d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Hong Kong SAR, China&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <field-sort-info field-sort-order-type='custom-order'>
        <field-sort-custom-order field='F1' />
        <field-sort-custom-order field='F2' />
        <field-sort-custom-order field='F3' />
        <field-sort-custom-order field='F4' />
        <field-sort-custom-order field='F5' />
        <field-sort-custom-order field='F6' />
        <field-sort-custom-order field='F7' />
        <field-sort-custom-order field='F8' />
        <field-sort-custom-order field='F9' />
        <field-sort-custom-order field='F10' />
        <field-sort-custom-order field='F11' />
        <field-sort-custom-order field='F12' />
        <field-sort-custom-order field='F13' />
        <field-sort-custom-order field='F14' />
        <field-sort-custom-order field='F15' />
        <field-sort-custom-order field='F16' />
        <field-sort-custom-order field='F17' />
      </field-sort-info>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Refugees Country of Origin (2012)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='FullRefugeeDataSet' name='federated.0y68jnz1uxo9a21evjn5g1x0vycd' />
          </datasources>
          <datasource-dependencies datasource='federated.0y68jnz1uxo9a21evjn5g1x0vycd'>
            <column caption='2012' datatype='integer' name='[F16]' role='measure' type='quantitative' />
            <column caption='Origin' datatype='string' name='[F2]' role='dimension' type='nominal' />
            <column-instance column='[F2]' derivation='None' name='[none:F2:nk]' pivot='key' type='nominal' />
            <column-instance column='[F16]' derivation='Sum' name='[sum:F16:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]' included-values='non-null' />
          <slices>
            <column>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' value='475' />
            <format attr='height' value='418' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]' />
              <size column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]' />
              <text column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F2:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Refugee Countries of Origin 2000 vs 2012</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='FullRefugeeDataSet' name='federated.0y68jnz1uxo9a21evjn5g1x0vycd' />
          </datasources>
          <datasource-dependencies datasource='federated.0y68jnz1uxo9a21evjn5g1x0vycd'>
            <column caption='2012' datatype='integer' name='[F16]' role='measure' type='quantitative' />
            <column caption='Origin' datatype='string' name='[F2]' role='dimension' type='nominal' />
            <column caption='2000' datatype='integer' name='[F4]' role='measure' type='quantitative' />
            <column-instance column='[F2]' derivation='None' name='[none:F2:nk]' pivot='key' type='nominal' />
            <column-instance column='[F16]' derivation='Sum' name='[sum:F16:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F4]' derivation='Sum' name='[sum:F4:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F2:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:F2:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:F2:nk]' member='%null%' />
                <groupfilter function='member' level='[none:F2:nk]' member='&quot;Aruba&quot;' />
                <groupfilter function='member' level='[none:F2:nk]' member='&quot;Curaçao&quot;' />
                <groupfilter function='member' level='[none:F2:nk]' member='&quot;Federated States of Micronesia&quot;' />
                <groupfilter function='member' level='[none:F2:nk]' member='&quot;French Guiana&quot;' />
                <groupfilter function='member' level='[none:F2:nk]' member='&quot;French Polynesia&quot;' />
                <groupfilter function='member' level='[none:F2:nk]' member='&quot;Holy See&quot;' />
                <groupfilter function='member' level='[none:F2:nk]' member='&quot;Libyan Arab Jamahiriya&quot;' />
                <groupfilter function='member' level='[none:F2:nk]' member='&quot;Liechtenstein&quot;' />
                <groupfilter function='member' level='[none:F2:nk]' member='&quot;Nauru&quot;' />
                <groupfilter function='member' level='[none:F2:nk]' member='&quot;New Caledonia&quot;' />
                <groupfilter function='member' level='[none:F2:nk]' member='&quot;Serbia (and Kosovo: S/RES/1244 (1999))&quot;' />
                <groupfilter function='member' level='[none:F2:nk]' member='&quot;Serbia and Montenegro&quot;' />
                <groupfilter function='member' level='[none:F2:nk]' member='&quot;Stateless&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <sort class='computed' column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F2:nk]' direction='DESC' using='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]' />
          <filter class='quantitative' column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]' included-values='in-range'>
            <min>311162</min>
            <max>4356266</max>
          </filter>
          <filter class='quantitative' column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F4:qk]' included-values='non-null' />
          <slices>
            <column>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F2:nk]</column>
            <column>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]</column>
            <column>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F4:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width' field='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F2:nk]' value='212' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F4:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F2:nk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='161' />
                <format attr='maxwidth' value='161' />
                <format attr='minheight' value='340' />
                <format attr='maxheight' value='340' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' x-axis-name='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F4:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F2:nk]' />
            </encodings>
          </pane>
          <pane id='2' x-axis-name='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F2:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F2:nk]</rows>
        <cols>([federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F4:qk] + [federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 3'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Returned Refugees and Internally Displayed Persons (IDPs) from 2000-2012</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='FullRefugeeDataSet' name='federated.0y68jnz1uxo9a21evjn5g1x0vycd' />
          </datasources>
          <datasource-dependencies datasource='federated.0y68jnz1uxo9a21evjn5g1x0vycd'>
            <column caption='2006' datatype='integer' name='[F10]' role='measure' type='quantitative' />
            <column caption='2007' datatype='integer' name='[F11]' role='measure' type='quantitative' />
            <column caption='2008' datatype='integer' name='[F12]' role='measure' type='quantitative' />
            <column caption='2009' datatype='integer' name='[F13]' role='measure' type='quantitative' />
            <column caption='2010' datatype='integer' name='[F14]' role='measure' type='quantitative' />
            <column caption='2011' datatype='integer' name='[F15]' role='measure' type='quantitative' />
            <column caption='2012' datatype='integer' name='[F16]' role='measure' type='quantitative' />
            <column caption='Population type' datatype='string' name='[F3]' role='dimension' type='nominal' />
            <column caption='2000' datatype='integer' name='[F4]' role='measure' type='quantitative' />
            <column caption='2001' datatype='integer' name='[F5]' role='measure' type='quantitative' />
            <column caption='2002' datatype='integer' name='[F6]' role='measure' type='quantitative' />
            <column caption='2003' datatype='integer' name='[F7]' role='measure' type='quantitative' />
            <column caption='2004' datatype='integer' name='[F8]' role='measure' type='quantitative' />
            <column caption='2005' datatype='integer' name='[F9]' role='measure' type='quantitative' />
            <column-instance column='[F3]' derivation='None' name='[none:F3:nk]' pivot='key' type='nominal' />
            <column-instance column='[F10]' derivation='Sum' name='[sum:F10:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F11]' derivation='Sum' name='[sum:F11:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F12]' derivation='Sum' name='[sum:F12:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F13]' derivation='Sum' name='[sum:F13:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F14]' derivation='Sum' name='[sum:F14:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F15]' derivation='Sum' name='[sum:F15:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F16]' derivation='Sum' name='[sum:F16:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F4]' derivation='Sum' name='[sum:F4:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F5]' derivation='Sum' name='[sum:F5:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F6]' derivation='Sum' name='[sum:F6:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F7]' derivation='Sum' name='[sum:F7:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F8]' derivation='Sum' name='[sum:F8:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F9]' derivation='Sum' name='[sum:F9:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F4:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F5:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F6:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F7:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F8:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F9:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F10:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F11:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F12:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F13:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F14:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F15:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F3:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:F3:nk]' member='&quot;Internally displaced&quot;' />
              <groupfilter function='member' level='[none:F3:nk]' member='&quot;Refugees&quot;' />
              <groupfilter function='member' level='[none:F3:nk]' member='&quot;Returned IDPs&quot;' />
              <groupfilter function='member' level='[none:F3:nk]' member='&quot;Returned refugees&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[:Measure Names]</column>
            <column>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F3:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[Multiple Values]</rows>
        <cols>([federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F3:nk] / [federated.0y68jnz1uxo9a21evjn5g1x0vycd].[:Measure Names])</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='4875' id='6' name='Sheet 1' pane-specification-id='0' param='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]' show-title='false' type='color' w='14000' x='5200' y='60625' />
        <zone h='59375' id='1' name='Sheet 1' w='48300' x='0' y='1750' />
        <zone h='33625' id='7' name='Sheet 3' w='98900' x='-300' y='66000' />
        <zone h='62625' id='8' name='Sheet 2' w='54100' x='44900' y='2625' />
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='33' type='pages' />
            <card size='49' type='filters' />
            <card size='183' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[:Measure Names]</field>
            <field>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F17:nk]</field>
            <field>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F2:nk]</field>
            <field>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F3:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
    </window>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F1:nk]</field>
            <field>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[none:F2:nk]</field>
            <field>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F10:qk]</field>
            <field>[federated.0y68jnz1uxo9a21evjn5g1x0vycd].[sum:F16:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Sheet 1' />
        <viewpoint name='Sheet 2' />
        <viewpoint name='Sheet 3'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      QEPd/D88xAWxvvvT4gAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7EAAAOxAGVKw4b
      AAAgAElEQVR4nO3dV2xcWZrY8f9NlQPJYs6kSCqRagVKavWo1Wl2Zj27sL0wvIBhGFgb++QH
      vxuG3wwDfjD8aD+sF341YNgbMNsz090KrZbUaiWKOYiZrMCqIlk53OQHST3d00lik8Vm1fk9
      CCJZVd+5RX517jnfPedKtm3bCEKNkg+7AYJwmEQCCDVNJIBQ00QCCDVNJIBQ00QCCDVNJIBQ
      00QCCDVNJIBQ00QCCDVNJIBQ09SvfmGaJuVy+bDaIggV940EKJVKh9WWI8G2bdLpNMFgsGIx
      DcNAVdUffuA+sSwLSZKQJKliMU3TRFGUisWDF+/rV7/hcDhwOBwVbcRRY5omH//mQ7Yi4YrF
      tG0bSZI4fvIUP/9HvzrweIZhIElSRf8gy+UymqZVLOls20bXdSr3sVIBxUycsfFZmvqG6W+v
      5+VbubuTwOmpw+38nsM1yyQzRUJ1gR+Ms7u9zeb6+v40+jU0tbRUPGa1q5pBsG3kGRtfYOjM
      BUIeBcs0KJVKmJZNPLZBJq9jGjqlchnLtjENg3KphGEYlEplLKPERmTr+f9tm9jiEjnbRi+X
      KJd1xLKJ6lQ1PYCeL+BubKbB7wEsHt3+mJQu46jvpsUNGFk+u/4EU5EJ9RynvDZNGpN0VqPO
      kad9+CrJ8CJ3NxfxdZzGubOFp7uDB7d+w3pK4ur7P6ejwXPYhynss6rpAVSHRimbo2xYlMs5
      itTxzrW3UPNZDIB8Arn1FG9fGaWQjuNv6uba+1cY6DvJ1SvDWAWDxs5B3n57FPJ5bEA3UhhS
      PSFNYiefP+QjFA5C1SSA7PLTE9L49MYnzK1l6GyU+eT6HYKdXQR9ARwN3TQUV7hx7wmd3QP4
      /D4kNPx+F5Lqwed1UUqucuOzcdp62wnW1+FQ3KhyCTXQQMAtJgeqkSTWBL8e0zT56//x31l+
      tlDx2GdHR/nzf/mvDjxOLc0CiQR4TaZpEomEqa+rr1jMsl7GoTlQVRWny3Xg8WopAapmEFxJ
      DocTr89XsXhauSzqMwdEJMAeXH+8TDSzVLF4lmUhy5Ubrr08KahkJbjSx/gy5tFKANsmuRXF
      29iGS4FMMsqOrtHVEuLl7yqfzeLy+Q50dD+3nuTxcvoAIwiVcqRmgSyryNTYF6yG04DOwtwS
      yh9cI7OxvIz+Q69TzrMW3vra92LPnpHZ3+YKR8CR6gGKW0sEj10mu7vJjiozs7CMHmghPHWP
      ZMYkNDCCFF/lxu828YT6ONehcW/8Gd6GTo6HZB4srWLkbK68c5HdTA55/gmTS1v0nDjB0p07
      WJtbXBzqZnZqmqKzkXcvNHPzN+PoTpnRt96hrd592G+BsM+OVALMPJ1jHReFHZOhP/8FZ89L
      nDgdYHxshHfOOJiN7uBp7GJk5AzzkxOkd7OY2IRXl+j0Hmfkytt4ws9IlyzKuoGnwY+qxCmW
      ZM6cO4dvZARjfRbdsImuL5G90EL/8GUafFnKZhkQCVBtjlAC6EhNA/zTC2eIrU6zs13AoWlI
      Uj35+D9wc1Ml0D1IncOJJEnPZ01sA0nWqAu6UDUNVZZRNAeqIuNwaJh6Adu2MU0Lh6vM3Rv3
      ONkdxEaivqEOWVZxOBQUVUOp8ABNqIwqqAPoPPr0FsmSwomzo3Q3+Q80mmma/Ke//q0YBFeJ
      KkiAyjJNk8n5VRRX5eoAhq6jalrF4lmmCZJU0WlJwzBQFQUqOPVqiELY3rSFfDQ3N1csXrnC
      hTBRCRa+l72TxSwe3C9KcjuQmyq35LKWfWsC6KUChZKBw+XG6VCpXKcEpUKWkm7hdHtxaq/2
      CfTVNbOmYYAsv8Kg1aZcLGBKGi6n9uUxmqaBJCnI8ncftRVPYxm5V2rbXkiNAZEAFfKtfyVT
      jz9namqCu3fvsZMz9jVgcn2dPGDktlmPf3Mg+fTeLcanJrh17wnWK77mzMzsl/+Pz8+ynsqx
      vLr6/U8ysty/e5/1rRRgsb6+CcDm2gLpvPmKkYWj7lt7AMXXxJWRYVKRVTa3wuzm4izF0pw6
      N0r82TiJnSwOv498qsTF995i/ck9tvIywxcuUNqcZT6c4tS5cySX5zFcIXzWNqvxNMdH3mDi
      +nXoG+LKUDtl6oktT/F0IcrgG6P0tQQJNHVzbPg04/e+oFDKMPvwMRk5wOWhBm4/XQUbRs8P
      E90tcKrdyfSmjZFNcOuTj/C0HKP9RUoXCgX0wi4PPn8IwXYunj2FvrPB3cfTuOva6Q7mWYok
      CHYbmOkY169fp3fwNC1Bk7k7N7G8IX559VwlfxfCIfiBMYAN+SQPp1cIBJxshhNozjreudzD
      WEzibOsOG8lNip4B3j0p8XBlDrvs5YMPzlHKJdm0PZw/0cXkgzC2kWZhKcsb58/jHxnBFZtl
      Le8jHtnh/Z+/9+UpyE5kgf8zPs7g5fcobM4xF07jcxRItUo0Do4y4I6xvhYhJTnAgt20hc9d
      z9VLp5kfe0xW8+AEdnd3SWkZGk5eZahJQ5Lg6fwab737AdsLD9EDPZwf7WBkoBUwOX/+AiMj
      p1h9NsGZSyOEV+cO+K0Xfgq+9RTITEe5cf06D2bXae8ZoCXgRnP6CQacKKqGqsg4nU5kWUZ1
      NZAPj3Pz/hR1De24yxFu3bpNPGdT3xBCk3TSuRJuvw/ZsoA0924/IFt6foITdNrcunmbtfjz
      K3Hq2wb5x3/2Jyg7YXR3A0GnQiBYh6bJLDz9nM+fLFDX2kIh8oybnz0gpxtQ3ObTW7eIlV14
      vpLSnoZW1sdu82B8Ht2GrkYPn968wUy4SIPvq9OKElImyqdfTFBGxampqIqCqecJRxLsxCNk
      Cj90hZFwFH1rHcAyDQzTRlEUZEXGfvm1qiJhI0sSlg0SNrYkYVsmlgWqqmDbFqZpoSjP/xJl
      GUzDxAJkSUaWbAzTejHFJiFhY5gmsqKiyNLzTZlkGdsyQZKxTAPbllDTS0wUOjnZ6kRVZCzz
      xWvKMpJtY1oWsqIiv2gTL/bSMU0DG/n5HDP28yk+WUGRJWybF4NdG8uyME0bRZGRJOnLvXgs
      237eO0kSsiRhmiZb9yZoNA5uilBqDKAO93z5tZgG3X9iRdgemaZJYmmNRs8P7x+0V5Lbgdzw
      +4q2SID9J+oAP4IU9KI0hw67GcI+EFd4CTVNJIBQ0w4kAbaePeXD3/6O67fu8+11NJ2N5TA/
      VGKzyhk+/u0/EN357h2rZ2Zmvr5tYWqN//t3H/Lhh79menX7ldpr6Gnm5je+/Hpi7AuKRo7V
      lfgrPV84ug5kDJDcydAzNExfRxOF5AZWsA09GUX1wkY0i+Ty4JNU9PQWdx48xdM6yHBvkLnJ
      aRIFhTffGsXnUMmmt2kOtRPfSdDi9bC8tk2yYNHqyDG7vsvpC5coZxPcvvEJob5hTvW1Itkm
      g+eucqpF48nUHGlvjifjz+g+dY6Asc3M0grOhl4G271YSgAplYBmLxvzY4SjG5wdvYBhGGBb
      gEx2e5OHT2boPDnKQHvdQbxdwiE6kB7gxIXLOHJRvvj8IWXTZD0SY3UrjpbdYiPvZqingWg4
      QblUwsRm8ckYyUIWta6TkdYgu3oZbJvY0hJWwMvWyga6nmFuNcMbJ/solsrYpSRPZzeQVC9v
      XnsHPbzCy6tzZh7d4u9+/Tsa27t4cv8B2VKBqclZkvEdTl55h5AeYSmyTTpbIh2LkrVsGrtO
      cPlEC8vrMQBs8kTCSWbn17n49rv0NB/sOgPhcBxIAkTWligrLtyKiaO+ndLqGAQ6kRWVnu5u
      lBczXfH4FsHGdpp8LkxJxe/zoqnPq7aWWSaS1VHLJWRypHJlOnt70ewy8XSRzq4OVMkGs8Ti
      /DwZVF5OFJ68cJULp3oplYoE6kO0d/VyYrAb2TZYezZHNAtBt0x4bZH5lTA2kNmOMr8Sxe3+
      6sZTMn6nxLP5eRKpwkG8VcIhO5A6QDmfJpbYxR0M4ZFyPHg8z7k338Sn6JQlNy7VJJct43LY
      RGLbuL1+fAEPWBKKbWJpGhpQKJbweNyUiwWQwbQduB0ymd0EmZKF1xfEYeeJ7+Sob2rB73aA
      UaJgqbg0iWw2h1OT2Ipv4w6ESC3PYjQ00VTfRNAtE4vFkVU39U0BUtEYuuyiuTlEuZDD5XFS
      yFm4HBbRWAJfQzNBrxPTNEkmk2I9wD6r2kKYoRcp6eBxuyq52Ofb21IuI2sa8o9oiEiAg1G1
      hTBVc6FWbjXf91LF9oLCHxCV4L0oFiFdwUXxug5fXRPs91d07Ww1EwmwF48fwnayYuG+0W/9
      67+sWOxqVzOVYFvPcv/2DT76+AYbyW9fzhhZXETM9dSWmukBzEyEXaWV994ZwLYMYvEdWpo8
      bMUKhOpVxp9MkNwuc761genJGdzN/Qx1+ViZXWG7bDM8fAqPo7L3sRUOXs30AGr9Mc60Wtz4
      5BPCyRSLq5tAnuXFKHMTk7QMnKK90Y9plNhOJPjs07vkS9vE0ypNXplk6uAWwQuHp2YSwMin
      MDzNnBseJLW9jV0uEo/EyOgGpmUh2SblskEsGqH39EUGm/yUZYXGpmYCfj+KJJZNVKOaOQWS
      nW7ySzNsWS6Gh0+Q2nzGRlLn5PEOmgMdjE8tEmzroL3Fw9zsEh0nTuLT6nG0KDhVJ275JzKX
      K+wrsSLsNZmmSfLTWzQXKzdc/sbdU/74Vwc6DSoKYcL3Oz0MFawEG+IeYQemZsYAgvBtRA+w
      B3MTT5nIZysWzx+s49K19yoWr5ZUbQJsh5/xZHqFxu4TjAx1vnJXp2diRIoeWrwKqsfDt50F
      W5aFZb3qxo0/XiVj1ZqqTYCZ+WUu/uwd7FIByygRDUdQfCGagg7ikThlScEhm9iOAI0+hc3w
      Fq5gI0EjRTIro6UyBPt7yEY2KOKiva0Z9Xs2zBWOpqpNgFPHj/Hozi2CnccJSc+IF9wU5lfg
      8jFmZiI4nbsogS5KhTD+oTaePn1M2Q7w/pXnG1LFt7bw9XawNDfOUrTElZ//kj6xKqzqVO8g
      2Bnk2rtvYyUi7BZLtPX00+SRyFsyHb3H6O3tpq93gFDATXQtytD5izS6dIpfWalfLiXB1cvJ
      zkby5e9emC8cXVXbAxS2N3n4KE7vyTfoaVB49OAuWlM//R4/6XoVpxpCdsk0Njbh00w+H1ug
      sasPn78BTDey0o7X2YDDnqPkaqAjIO4QWY1EIew1mabJ57dvYRTzFYvpCwS58NbbFYsnCmHC
      9xo8NVzxJZHCwajeMYAgvALRA+xB+m/+FnNpuWLxXm7V/pL/j3+J7913Kha/mokEKGyTsOpo
      9L56Z2gmk+grKwfXph+Kn0odWuxqIxIgGyViBqh32VimiazIz/eLUTQcqoKhlzEscDgcKKIQ
      VnVEAgBg8eT+XQqWi2O9rTx99JhdqZ4/e+8Et+9MUjZ1Tl74Gf2t4tal1UYMgl/QXHVceetN
      KGepa+lEzqRIp+O0n3mbM8e7kMXlOFVJJIDTj98pEWwIocrg9fkoZDI0d7bjaehmZ/ZTxmbX
      X/mexcLRIk6BAl30AtR3ARBs7uX9P+r98sdX3/8Fu4kIpioWpFQjUQl+TaZpkohEaKyr3L0C
      dF1H+8rOcLLDgXSAK8REJVj4XpLDgeLzVSyeWS6jiCWRB0IkwF4szMPM1Ne/d2wAOrsOpz3C
      nlVdAuR2YqxHt3HXtdDT1vCVn+hksxY+n/PHB4lvfXNv0FCjSIAjqOpmgWKxTSTFRWL+MZtf
      u2Azw/JyAgCrnGctvPX15y0skKlcM4WfiKrrASTNRXtbFzvZNXL5DPfu3yOFh59dHgK7zNTj
      hzR3d7OTySHNP2ZqKU7PiRMs3b2LFY5zcaib2alpCo4Q7422cOPDcQyXxOhb79JWL9YEVJuq
      6wGMbJJb1z8m7umjU02TKZjsxiIksgVWJj4nrbVS55TQdQOfL4CmSBSKMmfOnePqtSsoeoay
      YRFdXCKLxMCZy1w5dwrbFJckV6Oq6wHc9W28N9SH161QSIWRJIlgfT0ORWNo9H1c1iYbuy04
      HRqGXsCybWzbxuHWuXfjc050BwGZUKgBRVZxOBQUVUNVqu6zQkDUAV6baZok//5vaf7DQfCl
      N2F45EBiinuE7T9RB/gxRs7AH9YBfGLHiKNIJMBe+AMV3RtUODgiAfZgPPyEXOzbJ02bfM28
      1Xetwi0S9qpqEkAvFbBkB05NQS8VMCUHrgO6pdHD9fuM7zz+1p8Nt50RCXCEVM3UxvKD29yZ
      W8XGZure33NnMnLYTRKOgKrpAVyBRlx6mnxhG93RiFOGhbl5+gd7WF2K4lQyTC2E6Rg6S7MZ
      4+laHMVRx89ONXL98TK2rhPwK+BqY6THy8OxGVxNfYz0+1gYX0Fr7WPkWOthH6awz6qmB0DS
      6GwJ8ODRND29nciSTGOdg/v3HoA7yM5uiavXrrK1toChG5wYvUZXg0wpn6Vp8CLnehroPnOV
      RrXM6tYO569cw06EyeolvKFeTvW3HPYRCgeganoAfyiEqzlIdsekPhSiDYVgQwC9vEF7W5Dt
      gsbnX0zQ0taGN+hCcqu4Q804nDJtkhOfuxXLpeFqakTRdB7fu0ewqR2PK4C71YMi7sxelaom
      Aerb2wE4dXoQgL52m/W5SfpGzuKSJdoHztA+8AdPan7+nK/+y4vXef/nPb9/nOfrT3MoDjza
      H3zzBafq+hFHIVSaqAS/JtM0SSaTFd8aUVSC99fLSnD1jAEEYQ+q5hSokh7G75BKJ3/4gfvE
      ti0kaf8+q1RZ5Z/3/8W+vd5RduQTILI0h7tjiDrnD3WdBtvbOeobgvzYTna3vE3EXPuRr3J4
      NHHT7y8d7VMgu0g4ssqzhSi2bWMaBoZpPv+/aWJaFrZtv7ipXYmN9Rjmi5/bloVhmFi2TSa2
      RCKns7aygWnbmKbx++ea5pfPEarPke4BCrE1HN2XKITnKBfdPLp7j8WEwR9dOcGDsUks2c/5
      C0PMjU3QdOw4ifU5bkSXaOgZpsna5OHMGs39o/QrUXR/B+lMntDOJrduf0FGCfGn7/Vy/deT
      4JE4d+UdOkPewz5kYZ8d6QRYWlzm2c4zyjtpuobP0dXTz9ClHnZn76EFmmjwOrENid7Towx0
      Bxgv2pwabOLJ/Co7eYPWtiYSsS1623//mulUikCohdRKjII8wIlzV2jwZinZxnc3RDiyjnAC
      GDhCffzplUGM9AbPFudZXlzEGd7l8qlBVh5NUdAcOF0eXLIGyJSSK9zYWufE2VFKmzMkUxYt
      TXW4fAamZJM0TNweN6V8hKa2NjTZicejoTldoB7ht0r4TqIO8EJibZr1YoBzQ53f+zjTNPnf
      4/+LiLJaoZbtP03W+HfD//E7f15LdQCRAK/JNE3C8U3qQ5XbGrFc1nE49nPmRsKnffcKtlpK
      ANGv74FTduHTAhWLV7bLODSxNeJBONrToILwI9VAAtjks2kMy8YsZsiVxU7/wu/VQAJAcnOJ
      jWSW+ckp9MNujPCTUgNjAImOvn7u3ryJ3PYGg+R48OlDdi0no2d6ePD5FEY5j1Zfj22oXLgw
      xNzYU/J2gIuXO7j/u3HKDpnRt67RWie2Rqw2NZAAIDv8NLZ30d7XSmlrmulwhpagRb5UpOXY
      WU76oyyowwS3J1lanCO2W8TlgJzeQc/Ji4T8OcpGGRAJUG1q4hQIJJxeHw5FxhHqotUDiuZA
      UVUcDhVZ1XCoMqqm0d7WiVOTcDhdKLKCw6GiKKq4RWqVEnWA1yQWxBwMsSBGEA6BSAChpokE
      EGpaTSXAy4UtpmFgiaGPQI0lwPT0NJae4/GjMURBWIAaqQO8ZBbTPHn4lI7To5BPcPfRBFJ9
      Jxc6VG5NhpEsGDl5jJLqod2VZS3jI7XykKTu5eKlCwTdYi1ttampHgAksE1M02JtboxIqkRk
      bZ1iMU3jwCjDAw2YqofE+hpzz6I01EvkCybpyAab2+nDbrxwAGoqARSXn3MXR4k9G0fxNeFx
      O2huakSWJFwuF4qiIClu2rw64bITt10gV7Dw+3yAGDNUo5oqhJmmiSzLWKYJsoxRLmFLCk5N
      wUJBwoRyjs/u3Kf/wjU6gg7KpSJICqqmosiyKIQdELEi7IgQCXAwRCVYEA5BTc0C7ZfdrTD6
      7hYur59QR88PP0H4yRI9wB5M3/mY3/7P/8rjj/7msJsi/EhHtgdYGb/N+EYebCfvfHCCZNhJ
      f389YLC+FqPFmWJa76GdJP62btzfcTqbXN/A2d6OT9wJviYd2QRQPXVcfe8qxuIDIjmdyMwM
      yxtuLl46CxZgGeimjWVLWIUdHk5PkSo6+NmVc6zOPWUjluPkuVEUbNyWyezUF4TjJU6eH0XL
      bvB0Psobl98kvznDfKTA6KUL1HnEzgzV5sgmQCmT4OH1j3C7A1w5JpFt6aO7xWQ3tUs0vEVz
      nwJYJMJRVE8zzpZB3vLEmZhLIBtO3n6rj8eTq/jJ4Qg1kS5KXH5jkJXtdRYfPkULeBh7OkvA
      TFBX34EsFsRUpSObAE5/I9feH6HBDcVimEDAj6rlUb7j73Q3HmHB2iXY3kFiLcXSoo7sqkcq
      5gDw+QNoqoaiatQ3tdDU2YHXX4dUcLGytMpmYwuBjoYKHqFQCUc2AZo6+1FenJE4HI10dUlo
      ig+fJBEc8aM54aTtQm44CYVtFEWmrmOYriYX2xsKzkALZ9pasUpNOJwOnD09qA6NHneQ7vo6
      ook0fr8fNIPOodO0tVRuJzihcmqiEGabBrot4VAVsC1KuoFzj4Ul0zR58MmvMbPbNLR2cfKt
      D/a5td8kCmH7r6a2RpQUlS//fCR5z3/8L/WffbOilWDh4Ii5P6GmiQQQalpNJ0B5e53ffvYY
      07LJp9b5zW8//9rWiUapwPziIoVMilxJbKpYjWpiDPBdzJKBXcqwq5vk1tcwJCd6McPszCyS
      v53jHUHSmSyFgBtZcoHzsFss7Lea7gEA+vobWV2Kk9A1Wn0ytlFmKxrm/o3PeLkGLLWbIF80
      D7WdwsGo+QSQfd3oiUdo3jZkIBaL0HX8IsNtQYqH3TjhwNX0KZAWbKRZdhHqH0FrbqcUdBMI
      OJicnCF47Dh1mhNnVydOVUJxiuuAqlFNFML2k1gRdjDEijBBOAQiAYSaVtNjgL0q3fovZLY+
      q1xAG0qVvBr75UnxPsT0/eXHSM7vviXrYavaBLDMIpvhXbq6WknENnH6m/F7vrmzW7FYxOl0
      vt65p1GCcm4fW1vFfuJDzKo9BZIklWh0A9M22QrHQDaJbKwTTaSwDINcNkUymSIcCWNaNjvx
      CJGtJKapk82XsG2dXLZEbjfB+maEkiHqANWoansASVZo90psxBIUnXW4jQx3xx6xk5F49xdX
      mRq7T8/gKMlEnGafxZPZFAGtRD4fIrajceWsl4mnuxj5eXRPG8GGRpxq5WZFhMqo2h4AJOrb
      21iemaG+PkQyukXb0DAdfotsSaLj2GkGupuRASOfwt8+QG9bI4ViAcu0KKbTlCSFwVMjBCkQ
      2ckc9gEJB6CKEwDcvhCN9XU0NQZoaGlmZ2MFb/sx6nwuGuuCALS0tOJrH8aZeMp0JE9//yka
      iPJwLklHW5DcboIdXaG5znfIRyMcBFEIe02maRL+f/+euvidygW12ZcZmcOI5/s3v3mlWSCx
      N+gRISrBB0NUggXhEFTtLNBBmrj1IfnY2r6+5p/82/+ALIvPo0qrmgSw9CLJbImm+iC5RBy7
      rgHf905b6izOr9HV34+di5F3tFLvfrVYme042+tL+9LuL4kz0UNRNR85kmyz9mwV3bZZXF9F
      NrOsriSwLQtd17Esi/TiOM9SOpZlA0XC83PMbSYpxJeI5mxM00DXn99B0jINdF3HNE103UAM
      lapT1fQAkuKm0W+S3N2hbHpRpTxbW0XKu3NMLsWo7xjEm5xhZXEX76VLtNVBXc8QpcgipXob
      LIPpB7eZX4szeOUXpGY/pWw7yJVsVFXhjUtX6Qh5D/swhX1WNQkAEKqvZ3J6ivr+EWSpALbO
      +kaC5vZOvH4v/Y0nCDaO0BqQAB1QOdXbwOdPJmk5UyZnyLSHPMQSaVpb+zkxMMDixgZNXicl
      2zjswxMOQNWcAgH4GpswLYX2Oh+S5CRYF+TEiV6yqV0sScHVGOLZ5zeJpEqAis/nxtN6jDqX
      jN+t4lLBUH00Bd34/T4kWcbr9aI5XTi1qvqsEF4QdYDXZJomf/9X/43tpal9fd2/+M9/hfwd
      8+6iDrD/amprxP128Vd/Tv2LSyn2iySmQA+FSIA90JwuPP79TQDhcIgE2IPrC3NEpicqFs+y
      rO8skg02NfOnp0cq1pZqU7UJUMokWYtuo7n9dLa3oO7lDi+WSa5Yxuv5eoVsOhrlYWJrn1r6
      4+TLukiAH6FqTzy3l5bJKgo7sVU2t/Z4Lb9ZZmltg1Qiyk62tL8NFH4SqrYHsO0y4fV1fIqD
      bp/B00cLjFzo4OmjVbxyls10idZAkMCxfrTwLPnGQZYe3aBQUjl55RrltcesbGWR6rqoc5k4
      ZXHOX42qNgFk2cvZy0PYm6ukMilKJR3bNikWy7hcEuevXCG/MEPJsqBYRDcl2gdG6PWprFlZ
      inILv/z5RSaebWLoBRRLzBZXo6o9BZKUEg9vfcrEwjoORx12YZ3r1+9SlDWc3gAuh4K/wc30
      vc948iyGqkg4HBqSoqLJHuzcKh/f/IxUwUTVNBRxl8iqVLU9QMvpS/yT07//uvODX37jMc62
      Y/yq7dhXvvN82WMfQNM3Hy9Un6pNgIP0Z2fe4J95PBWLpxsGmvrtv6qg+xWv4Ra+1dcuhSgW
      i+zu7h5me37yLMsin8/j81VukbxpmhW9LMGyLICKLtAxTRNZlit2KcTLmOJaoNd0GGuCdV1H
      0765q91BMc3nm4BVMul0XUdV1YpeC2QYRvUOgoUfp5KfxIcR7yUxBjgCKvnpD5X95H9J/Y4x
      zkGRJAlN00QPINQ2kQB7VMwkmBifIl3UKaZSlIBCZodMYe8rx1KxVR49esTCatf61jUAAAQg
      SURBVAzLLDI78ZTNRAZsk/DyHHMrYSzbJpVKgWWQSOywl/qcbdtktqNsbu1+eSxPxybIlCxM
      vcD81ASbiQw2NuGlGWaXw1hYpFMZLCAej/O6YW3bYju6xtZuAYDY2jyPHj1iNbaLUUgzOT5O
      IlPCNnVW5iZZDiexMUmlstiWSSKZfO2YuZ0oT8fGiKeLmHqBuclxwttZwGJjcYa5lahIgD2x
      y0xNzuMPOpgYn2dndY0dPc/M9CKKtte31GJzOUxTTw/NDQGWp8bB38DyxBix+AYb2zql6CIb
      qSJra2tshxeJpEp72sDNtkpEN6NEE0lAZ3J8loZGH4+fTBBemKToDLAyN8FuZJ5n2wrWzhIr
      sQyba5ukI4usb7/+dVHlQpqdrQib28+3lV/eiNLT00OD38381CTuujrGx56ysznDVtlDfHWW
      ZCbH2lqUxMoMW/nXjkgslqGlrYW56Sk2ZsbRPXWszoyztbbAWk7F3JoTCbAnegk52ExPzwB+
      LY9uZvj0w4+pGzyNR93jW2qbJFJxZscmSRUNCmj0d3Yy1OZiYztPW/cAw4MtbO2U2Fqe4P6z
      DCf7W9jL2FFWXAwOHcOhymDnUTztdHb04lFL5IoOBo/10Brys7Wa5tiZfnr6Byilt9nemOfT
      qSjDAx2vnXhOTx3HejtRlefPTEVXGJuco2iUMOUg3V3dhFwyOzsGx0710dvaTL6YJzz/hMdh
      nROdodeMqdF3/BhmLkVTayu7hptTfd00N/kIRwoMDXbTe6pfJMCeyDJ6sYhplDAMBUXxc+mt
      N9ha39jTKQmAjcrld3/JB9dG2ZidpKAblE2TTM7C45IpFvJks0U8Lo3m3lP0+A22UvtwI1dJ
      xSzlMCwD05JQKJMvGxTLOh6vRDpVplzMIqsuGjqHGAjJxF6cxuydybu/+hdcuzDA9MwitllA
      N00KloVbM8nmDPJ6CU1RaR86S4uSZjuvv2YMm42FKQx/O0O9bahmiaxhoJfKuJ0S6YJOOZMR
      CbAnqoc2T5mPPrqJq7kbl8dNMNRNt1cnuvvaffVztsny9CM+uXkHV1MnJ7ubuXvzY8IEGWht
      I770kHuLOXoaXbg9Po4PD7O9voJuvX4o00jz2fVPmZl4wuP5HZrrSlz/3ScEWvtp627m0Y2P
      SJle2k6cIPH0No9mYrR1hHC5XRx/4zzxlUVe93YhhXSUm7cfMPP4LrMbW0w9vMONe+M0t3XS
      1uzl9se/Qwu209jdy9K9j1lJ6tQHfLjdLobPn2NjcZnXOlQzz8LCKrOP73H70RzdPY3c+/gj
      ds0g/Sd7WX9ylwezu6IQ9roOoxAmHBzRAwg1TSSAUNNEAgg1TSSAUNNEAgg1TSSAUNNEAgg1
      TSSAUNNEAgg1TSSAUNNEAgg1TSSAUNNEAgg17f8DB+bE8Bl/jeYAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
      RK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
